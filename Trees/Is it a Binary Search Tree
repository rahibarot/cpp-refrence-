#include <iostream>
#include <algorithm>
#include <cstdlib>

using namespace std;

struct tree{
    int value;
    tree *left;
    tree *right;
};

struct tree *createRoot(int v){
    struct tree *temp = new tree;
    temp-> value = v;
    temp-> left = temp-> right = NULL;
    return temp;
}

int getHeight(tree *root){
    if(root == NULL)
        return 0;
    else{
        int left = getHeight(root-> left);
        int right = getHeight(root-> right);
        return 1 + max(left, right);
    }
}

bool isBinary(tree *root, tree *leftSide = NULL, tree *rightSide = NULL){
    if(root == NULL)
        return true;
    if(leftSide != NULL && root-> value < leftSide-> value)
        return false;
    if(rightSide != NULL && root-> value > rightSide-> value )
        return false;
    return isBinary(root-> left, leftSide, root) && isBinary(root-> right, root, rightSide);
}

struct tree *createTree(struct tree *root, int v){
    
    if(root == NULL)
        return createRoot(v);
    else if(v <= root-> value)
        root-> left = createTree(root-> left, v);
    else
        root-> right = createTree(root-> right, v);
    return root;
}

int main(){

    /* Case 1
    int arr[8] = {5,3,7,2,4,6,8};
    struct tree *parent = NULL;
    parent = createRoot(arr[0]);
    for(int i = 1; i < 7; i++){
        createTree(parent, arr[i]);
    }
    */
    
    /* Case 2
    int arr[9] = {1,2,-1,3,6,-5,-8,12,4};
    struct tree *parent = NULL;
    parent = createRoot(arr[0]);
    for(int i = 1; i < 13; i++){
        createTree(parent, arr[i]);
    }
    */
    
    /* Case 3
    struct tree *parent = createRoot(3);
    parent->left        = createRoot(2);
    parent->right       = createRoot(5);
    parent->left->left  = createRoot(1);
    parent->right->right = createRoot(6);
    */
    
    /* Case 4
    struct tree *parent = createRoot(3);
    parent->left        = createRoot(2);
    parent->right       = createRoot(5);
    parent->left->left  = createRoot(4);
    parent->right->right = createRoot(6);
    */
 
    if(isBinary(parent))
        cout << "Tree is binary search tree" << endl;
    else
        cout << "Tree is NOT binary search tree" << endl;
    
    return 0;
}

/******* Output******

Case 1:
Tree is binary search tree
Program ended with exit code: 0

Case 2:
Tree is binary search tree
Program ended with exit code: 0

Case 3:
Tree is binary search tree
Program ended with exit code: 0

Case 4:
Tree is NOT binary search tree
Program ended with exit code: 0
*/
