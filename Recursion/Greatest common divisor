// recursive formula to find greatest common divisor
// initially set variables to int type
// but for very, very large numbers - decided to use double type
// used % modulo but cannot use with double
// used fmod() from cmath library

#include <iostream>
#include <cmath>
#include <iomanip>

/*
 int gcd_naive(int a, int b) {
    int current_gcd = 1;
    for (int d = 2; d <= a && d <= b; d++) {
        if (a % d == 0 && b % d == 0) {
            if (d > current_gcd) {
                current_gcd = d;
            }
        }
    }
    return current_gcd;
}
*/

double gcd(double a, double b){
    if (b == 0)
        return a;
    else{
        double a_remainder = std::fmod(a,b);
        return gcd(b, a_remainder);
    }
}

int main() {
    double a, b;
    std::cin >> a >> b;
    //std::cout << gcd_naive(a, b) << std::endl;
    std::cout << std::setprecision(0) << std::fixed << std::endl;
    std:: cout << gcd(a, b) << std:: endl;
    return 0;
}
