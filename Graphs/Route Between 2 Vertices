#include <iostream>
#include <list>

class Graph {
    int V;                                  // number of vertices
    std::list<int> *adj;                    // pointer to array container adjacency list
public:
    Graph(int V);
    void addEdge(int v, int w);
    bool isReachable(int s, int e);
};

Graph::Graph(int V){
    this-> V = V;
    this-> adj = new std::list<int> [V];
}

void Graph::addEdge(int v, int w){
    adj[v].push_back(w);
}

bool Graph::isReachable(int s, int e){
    if(s == e)
        return true;
    
    bool *visited = new bool[V];
    for(int i = 0; i < V; i++){
        visited[i] = false;                 //mark all vertices as unvisited
    }
    
    std::list<int> queue;                    // queue to holded visited state
    visited[s] = true;                      // current vertex marked visited
    queue.push_back(s);                     // current vertex enqueued
    
    std::list<int>::iterator it;            // used to get all adjacent vertices of a vertex;
    
    while(!queue.empty()) {
        s = queue.front();                  // set start to first vertex
        queue.pop_front();                  // dequeue
        for(it = adj[s].begin(); it !=adj[s].end(); it++){  // check all adjacent vertices
            if(*it == e)                    // if adjacent vertex is end vertex, break
                return true;
            if (!visited[*it]){             // mark each vertex as visted
                visited[*it] = true;
                queue.push_back(*it);       // push visited vertex to queue
            }
        }
    }
    
    return false;
    
}

int main() {
    
    Graph g(6);
    g.addEdge(1, 2);
    g.addEdge(1, 3);
    g.addEdge(2, 5);
    g.addEdge(3, 6);
    g.addEdge(1, 4);
    g.addEdge(4, 5);
    g.addEdge(5, 5);
    
    int start = 1;
    int end = 5;
    if(g.isReachable(start, end))
        std::cout << "There is a path from " << start << " to " << end;
    else
        std::cout << "There is no path from " << start << " to " << end;
    std::cout << std::endl;
    
    start = 5;
    end = 1;
    if(g.isReachable(start, end))
        std::cout << "There is a path from " << start << " to " << end;
    else
        std::cout << "There is no path from " << start << " to " << end;
    
    std::cout << std::endl;
    
    return 0;
}


/****************Output********************

There is a path from 1 to 5
There is no path from 5 to 1
Program ended with exit code: 0

*******************************************/
